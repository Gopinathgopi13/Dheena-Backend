generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  user_id     String    @id @default(uuid())
  email       String    @unique
  first_name  String
  last_name   String
  password    String
  provider    String? // 'local', 'google', 'microsoft', 'github', 'linkedin'
  profile_url String?
  token       String?
  expires_at  DateTime?
  provider_id String? // ID from the provider (e.g., Google, Facebook)
  gender      String?
  dob         DateTime?
  is_active   Boolean
  role        Role      @default(USER)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orders      Order[]
  Review      Review[]
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String
  price       Float
  stock       Int
  imageUrl    String?
  categoryId  String
  category    Category    @relation(fields: [categoryId], references: [id])
  reviews     Review[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  OrderItem   OrderItem[]
}

model Order {
  id        String      @id @default(uuid())
  user_id   String
  user      User        @relation(fields: [user_id], references: [user_id])
  items     OrderItem[]
  total     Float
  status    String      @default("PENDING")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Review {
  id        String   @id @default(uuid())
  user_id   String
  user      User     @relation(fields: [user_id], references: [user_id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int      @default(1)
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
